/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Salva
 */
public class VC_Main_Ver extends javax.swing.JFrame {
    String query1,query2,query3,query4;
    /**
     * Creates new form VC_Main_Ver
     */
    public VC_Main_Ver() throws SQLException {
        initComponents();
        
        this.jTab_Records.setShowGrid(true);
        
        setTableColumns(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTab_Records = new javax.swing.JTable();
        jCB_Selection = new javax.swing.JComboBox<>();
        jBtn_Back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bt_auditoria = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ver");

        Background.setBackground(new java.awt.Color(29, 76, 45));

        jTab_Records.setBackground(new java.awt.Color(204, 204, 204));
        jTab_Records.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTab_Records);

        jCB_Selection.setBackground(new java.awt.Color(188, 189, 190));
        jCB_Selection.setForeground(new java.awt.Color(29, 76, 45));
        jCB_Selection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Citas", "Paciente", "MÃ©dico", "Hospital" }));
        jCB_Selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_SelectionActionPerformed(evt);
            }
        });

        jBtn_Back.setBackground(new java.awt.Color(188, 189, 190));
        jBtn_Back.setForeground(new java.awt.Color(29, 76, 45));
        jBtn_Back.setText("Back");
        jBtn_Back.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn_BackActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/VC_LogInLogo.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        bt_auditoria.setBackground(new java.awt.Color(188, 189, 190));
        bt_auditoria.setForeground(new java.awt.Color(29, 76, 45));
        bt_auditoria.setText("AUDITORIAS");
        bt_auditoria.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bt_auditoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_auditoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addComponent(jCB_Selection, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_auditoria)
                        .addGap(18, 18, 18)
                        .addComponent(jBtn_Back)))
                .addContainerGap())
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCB_Selection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn_Back)
                    .addComponent(bt_auditoria))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCB_SelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_SelectionActionPerformed
        try {
            setTableColumns(this.jCB_Selection.getSelectedIndex());
        } catch (SQLException ex) {
            System.out.println(ex.toString());
        }
        
    }//GEN-LAST:event_jCB_SelectionActionPerformed

    private void jBtn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn_BackActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBtn_BackActionPerformed

    private void bt_auditoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_auditoriaActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel)this.jTab_Records.getModel();
            Connection con = ConexionBD.getConexion(ConexionBD.con);
            model.setColumnCount(0);
            Statement statement = con.createStatement();
            ResultSet resultSet;
            model.setRowCount(0);
            model.addColumn("idAuditoria");
            model.addColumn("usuario");
            model.addColumn("fechaHora");
            model.addColumn("tipoAccion");
            model.addColumn("descripcion");
            model.addColumn("tablaAfectada");
            model.addColumn("conexion");
            String queryy = "SELECT * FROM auditoria;";
            resultSet= statement.executeQuery(queryy);
            while (resultSet.next()) {
                Object[] rowData = new Object[7];
                rowData[0] = resultSet.getInt("idAuditoria");
                rowData[1] = resultSet.getString("usuario");
                rowData[2] = resultSet.getString("fechaHora");
                rowData[3] = resultSet.getString("tipoAccion");
                rowData[4] = resultSet.getString("descripcion");
                rowData[5] = resultSet.getString("tablaAfectada");
                rowData[6] = resultSet.getString("conexion");
                model.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VC_Main_Ver.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_auditoriaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VC_Main_Ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VC_Main_Ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VC_Main_Ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VC_Main_Ver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VC_Main_Ver().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(VC_Main_Ver.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton bt_auditoria;
    private javax.swing.JButton jBtn_Back;
    private javax.swing.JComboBox<String> jCB_Selection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTab_Records;
    // End of variables declaration//GEN-END:variables

    private void setTableColumns(int index) throws SQLException{
        DefaultTableModel model = (DefaultTableModel)this.jTab_Records.getModel();
        Connection con = ConexionBD.getConexion(ConexionBD.con);
        Statement statement = con.createStatement();
        model.setColumnCount(0);
        ResultSet resultSet;
        switch(index){
            case 0: // Citas
                model.setRowCount(0);
                model.addColumn("Num");
                model.addColumn("Hora");
                model.addColumn("Fecha");
                model.addColumn("Estado");
                model.addColumn("Observaciones");
                model.addColumn("NSS");
                model.addColumn("MÃ©dico");
                model.addColumn("Hospital");
                query1 = "SELECT * FROM cita;";
                resultSet= statement.executeQuery(query1);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[8]; 
                        rowData[0] = resultSet.getInt("cita_numCita");
                        rowData[1] = resultSet.getString("cita_horaCita");
                        rowData[2] = resultSet.getDate("cita_fechaCita");
                        rowData[3] = resultSet.getString("cita_estadoCita");
                        rowData[4] = resultSet.getString("cita_observacionesCita");
                        rowData[5] = resultSet.getInt("pac_nssPac");
                        rowData[6] = resultSet.getInt("med_numRegistroMedico");
                        rowData[7] = resultSet.getInt("hosp_idHosp");
                        model.addRow(rowData);
                    }
                break;
                
            case 1: // Paciente
                model.setRowCount(0);
                model.addColumn("NSS");
                model.addColumn("Nombre");
                model.addColumn("2do Nombre");
                model.addColumn("Ap Paterno");
                model.addColumn("Ap Materno");
                model.addColumn("TelÃ©fono");
                model.addColumn("GÃ©nero");
                model.addColumn("Nacimiento");
                model.addColumn("Correo");
                model.addColumn("OcupaciÃ³n");
                query2 = "SELECT * FROM paciente;";
                resultSet = statement.executeQuery(query2);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[10]; 
                        rowData[0] = resultSet.getInt("pac_nssPac");
                        rowData[1] = resultSet.getString("pac_primNomPac");
                        rowData[2] = resultSet.getString("pac_segunNomPac");
                        rowData[3] = resultSet.getString("pac_apPatPac");
                        rowData[4] = resultSet.getString("pac_apMatPac");
                        rowData[5] = resultSet.getString("pac_telPac");
                        rowData[6] = resultSet.getString("pac_generoPac");
                        rowData[7] = resultSet.getDate("pac_fechaNacPac");
                        rowData[8] = resultSet.getString("pac_correoPac");
                        rowData[9] = resultSet.getInt("ocup_idOcupacion");
                        model.addRow(rowData);
                    }
                break;
                
            case 2: // Medico
                model.setRowCount(0);
                model.addColumn("Num");
                model.addColumn("Nombre");
                model.addColumn("2do Nombre");
                model.addColumn("Ap Paterno");
                model.addColumn("Ap Materno");
                model.addColumn("TelÃ©fono");
                model.addColumn("Correo");
                model.addColumn("Especialidad");
                query3 = "SELECT * FROM medico;";
                resultSet = statement.executeQuery(query3);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[8]; 
                        rowData[0] = resultSet.getInt("med_numRegistroMedico");
                        rowData[1] = resultSet.getString("med_primNomMed");
                        rowData[2] = resultSet.getString("med_segunNomMed");
                        rowData[3] = resultSet.getString("med_apPatMed");
                        rowData[4] = resultSet.getString("med_apMatMed");
                        rowData[5] = resultSet.getInt("med_telMed");
                        rowData[6] = resultSet.getString("med_correoMed");
                        rowData[7] = resultSet.getInt("esp_numEsp");
                        model.addRow(rowData);
                    }
                break;
                
            case 3: // Hospital
                model.setRowCount(0);
                model.addColumn("ID");
                model.addColumn("Nombre");
                model.addColumn("Calle");
                model.addColumn("Colonia");
                model.addColumn("Num Ext");
                model.addColumn("Num Int");
                model.addColumn("Ciudad");
                model.addColumn("TelÃ©fono");
                model.addColumn("Horario");
                model.addColumn("PÃ¡gina Web");
                query4 = "SELECT * FROM hospital;";
                resultSet = statement.executeQuery(query4);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[10]; 
                        rowData[0] = resultSet.getInt("hosp_idHosp");
                        rowData[1] = resultSet.getString("hosp_nombreHosp");
                        rowData[2] = resultSet.getString("hosp_calleHosp");
                        rowData[3] = resultSet.getString("hosp_colHosp");
                        rowData[4] = resultSet.getString("hosp_numExtHosp");
                        rowData[5] = resultSet.getString("hosp_numIntHosp");
                        rowData[6] = resultSet.getString("hosp_ciudadHosp");
                        rowData[7] = resultSet.getInt("hosp_telHosp");
                        rowData[8] = resultSet.getString("hosp_horarioHosp");
                        rowData[9] = resultSet.getString("hosp_paginaWebHosp");
                        model.addRow(rowData);
                    }
                break;
        }
    }

}

