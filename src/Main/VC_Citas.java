/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Salva
 */
public class VC_Citas extends javax.swing.JFrame {
    String res;
    /**
     * Creates new form VC_Main_Ver
     */
    public VC_Citas() {
        initComponents();
        
        this.jTab_Records.setShowGrid(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTab_Records = new javax.swing.JTable();
        jCB_Selection = new javax.swing.JComboBox<>();
        jBtn_Back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jBtn_AgendarCita = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bt_buscar = new javax.swing.JButton();
        jbt_funcion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Citas");

        Background.setBackground(new java.awt.Color(29, 76, 45));

        jTab_Records.setBackground(new java.awt.Color(204, 204, 204));
        jTab_Records.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Hora", "Fecha", "NSS_Paciente", "Nombre", "Apellido", "num_Medico", "Nombre", "Apellido", "id_Hospital", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTab_Records);
        if (jTab_Records.getColumnModel().getColumnCount() > 0) {
            jTab_Records.getColumnModel().getColumn(0).setResizable(false);
            jTab_Records.getColumnModel().getColumn(1).setResizable(false);
            jTab_Records.getColumnModel().getColumn(2).setResizable(false);
            jTab_Records.getColumnModel().getColumn(3).setResizable(false);
            jTab_Records.getColumnModel().getColumn(4).setResizable(false);
            jTab_Records.getColumnModel().getColumn(5).setResizable(false);
            jTab_Records.getColumnModel().getColumn(6).setResizable(false);
            jTab_Records.getColumnModel().getColumn(7).setResizable(false);
            jTab_Records.getColumnModel().getColumn(8).setResizable(false);
            jTab_Records.getColumnModel().getColumn(9).setResizable(false);
            jTab_Records.getColumnModel().getColumn(10).setResizable(false);
        }

        jCB_Selection.setBackground(new java.awt.Color(188, 189, 190));
        jCB_Selection.setForeground(new java.awt.Color(29, 76, 45));
        jCB_Selection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Citas Asignadas", "Citas según doctor", "Citas según pacientes", "Citas según hospitales", "Citas según fechas", " " }));
        jCB_Selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_SelectionActionPerformed(evt);
            }
        });

        jBtn_Back.setBackground(new java.awt.Color(188, 189, 190));
        jBtn_Back.setForeground(new java.awt.Color(29, 76, 45));
        jBtn_Back.setText("Back");
        jBtn_Back.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn_BackActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/VC_LogInLogo.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jBtn_AgendarCita.setBackground(new java.awt.Color(188, 189, 190));
        jBtn_AgendarCita.setForeground(new java.awt.Color(29, 76, 45));
        jBtn_AgendarCita.setText("Agendar cita");
        jBtn_AgendarCita.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtn_AgendarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn_AgendarCitaActionPerformed(evt);
            }
        });

        jLabel2.setText(": Orden");

        bt_buscar.setBackground(new java.awt.Color(188, 189, 190));
        bt_buscar.setForeground(new java.awt.Color(29, 76, 45));
        bt_buscar.setText("BUSCAR");
        bt_buscar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_buscarActionPerformed(evt);
            }
        });

        jbt_funcion.setBackground(new java.awt.Color(188, 189, 190));
        jbt_funcion.setForeground(new java.awt.Color(29, 76, 45));
        jbt_funcion.setText("FUNCION");
        jbt_funcion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbt_funcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_funcionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1179, Short.MAX_VALUE)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addComponent(jCB_Selection, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(bt_buscar)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbt_funcion)
                        .addGap(18, 18, 18)
                        .addComponent(jBtn_AgendarCita)
                        .addGap(18, 18, 18)
                        .addComponent(jBtn_Back)))
                .addContainerGap())
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCB_Selection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn_Back)
                    .addComponent(jBtn_AgendarCita)
                    .addComponent(jLabel2)
                    .addComponent(bt_buscar)
                    .addComponent(jbt_funcion))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCB_SelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_SelectionActionPerformed

        try {
            res = this.jCB_Selection.getSelectedItem().toString();
            Connection con = ConexionBD.getConexion(ConexionBD.con);
            Statement statement = con.createStatement();
            DefaultTableModel modelo = (DefaultTableModel) this.jTab_Records.getModel();
            modelo.setColumnCount(0);
            modelo.addColumn("num Cita");
            modelo.addColumn("Hora");
            modelo.addColumn("Fecha");
            modelo.addColumn("nss Pac");
            modelo.addColumn("Prim Nom");
            modelo.addColumn("Ap Pat");
            modelo.addColumn("numero Medico");
            modelo.addColumn("Prim Nom");
            modelo.addColumn("Ap Pat");
            modelo.addColumn("ID Hosp");
            modelo.addColumn("Nombre");
            switch (res) {
                case "Citas Asignadas":
                    modelo.setRowCount(0);
                    String query = "SELECT * FROM VistaCitas";
                    ResultSet resultSet = statement.executeQuery(query);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[11]; 
                        rowData[0] = resultSet.getInt("cita_numCita");
                        rowData[1] = resultSet.getString("cita_horaCita");
                        rowData[2] = resultSet.getDate("cita_fechaCita");
                        rowData[3] = resultSet.getInt("pac_nssPac");
                        rowData[4] = resultSet.getString("pac_primNomPac");
                        rowData[5] = resultSet.getString("pac_apPatPac");
                        rowData[6] = resultSet.getInt("med_numRegistroMedico");
                        rowData[7] = resultSet.getString("med_primNomMed");
                        rowData[8] = resultSet.getString("med_apPatMed");
                        rowData[9] = resultSet.getInt("hosp_idHosp");
                        rowData[10] = resultSet.getString("hosp_nombreHosp");

                        modelo.addRow(rowData);
                    }

                    break;

                case "Citas según doctor":
                    modelo.setRowCount(0);
                    String query2 = "SELECT * FROM VistaCitas ORDER BY med_primNomMed ASC;";
                    resultSet = statement.executeQuery(query2);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[11]; 
                        rowData[0] = resultSet.getInt("cita_numCita");
                        rowData[1] = resultSet.getString("cita_horaCita");
                        rowData[2] = resultSet.getDate("cita_fechaCita");
                        rowData[3] = resultSet.getInt("pac_nssPac");
                        rowData[4] = resultSet.getString("pac_primNomPac");
                        rowData[5] = resultSet.getString("pac_apPatPac");
                        rowData[6] = resultSet.getInt("med_numRegistroMedico");
                        rowData[7] = resultSet.getString("med_primNomMed");
                        rowData[8] = resultSet.getString("med_apPatMed");
                        rowData[9] = resultSet.getInt("hosp_idHosp");
                        rowData[10] = resultSet.getString("hosp_nombreHosp");
                        modelo.addRow(rowData);

                    }
                    break;

                case "Citas según pacientes":
                    modelo.setRowCount(0);
                    String query3 = "SELECT * FROM VistaCitas ORDER BY pac_primNomPac ASC;";
                    resultSet = statement.executeQuery(query3);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[11]; 
                        rowData[0] = resultSet.getInt("cita_numCita");
                        rowData[1] = resultSet.getString("cita_horaCita");
                        rowData[2] = resultSet.getDate("cita_fechaCita");
                        rowData[3] = resultSet.getInt("pac_nssPac");
                        rowData[4] = resultSet.getString("pac_primNomPac");
                        rowData[5] = resultSet.getString("pac_apPatPac");
                        rowData[6] = resultSet.getInt("med_numRegistroMedico");
                        rowData[7] = resultSet.getString("med_primNomMed");
                        rowData[8] = resultSet.getString("med_apPatMed");
                        rowData[9] = resultSet.getInt("hosp_idHosp");
                        rowData[10] = resultSet.getString("hosp_nombreHosp");
                        modelo.addRow(rowData);

                    }
                    break;

                case "Citas según hospitales":
                    modelo.setRowCount(0);
                    String query4 = "SELECT * FROM VistaCitas ORDER BY hosp_idHosp ASC;";
                    resultSet = statement.executeQuery(query4);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[11]; 
                        rowData[0] = resultSet.getInt("cita_numCita");
                        rowData[1] = resultSet.getString("cita_horaCita");
                        rowData[2] = resultSet.getDate("cita_fechaCita");
                        rowData[3] = resultSet.getInt("pac_nssPac");
                        rowData[4] = resultSet.getString("pac_primNomPac");
                        rowData[5] = resultSet.getString("pac_apPatPac");
                        rowData[6] = resultSet.getInt("med_numRegistroMedico");
                        rowData[7] = resultSet.getString("med_primNomMed");
                        rowData[8] = resultSet.getString("med_apPatMed");
                        rowData[9] = resultSet.getInt("hosp_idHosp");
                        rowData[10] = resultSet.getString("hosp_nombreHosp");
                        modelo.addRow(rowData);
                    }
                    break;
                    
                case "Citas según fechas":
                    modelo.setRowCount(0);
                    String query5 = "SELECT *\n"
                            + "FROM VistaCitas\n"
                            + "ORDER BY cita_fechaCita ASC;";
                    resultSet = statement.executeQuery(query5);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[11]; 
                        rowData[0] = resultSet.getInt("cita_numCita");
                        rowData[1] = resultSet.getString("cita_horaCita");
                        rowData[2] = resultSet.getDate("cita_fechaCita");
                        rowData[3] = resultSet.getInt("pac_nssPac");
                        rowData[4] = resultSet.getString("pac_primNomPac");
                        rowData[5] = resultSet.getString("pac_apPatPac");
                        rowData[6] = resultSet.getInt("med_numRegistroMedico");
                        rowData[7] = resultSet.getString("med_primNomMed");
                        rowData[8] = resultSet.getString("med_apPatMed");
                        rowData[9] = resultSet.getInt("hosp_idHosp");
                        rowData[10] = resultSet.getString("hosp_nombreHosp");
                        modelo.addRow(rowData);
                    }
                    break;
                    
            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jCB_SelectionActionPerformed

    private void jBtn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn_BackActionPerformed
        VC_Main f_Main = new VC_Main();
        
        f_Main.setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_jBtn_BackActionPerformed

    private void jBtn_AgendarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn_AgendarCitaActionPerformed
       
        VC_Citas_Agendar f_AgCita = new VC_Citas_Agendar();
        
        f_AgCita.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jBtn_AgendarCitaActionPerformed

    private void bt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_buscarActionPerformed
        try {
            String fechaBuscar,horaBuscar;
            fechaBuscar = JOptionPane.showInputDialog("Que fecha deseas buscar?");
            horaBuscar = JOptionPane.showInputDialog("Que hora deseas agendar?");
            fechaBuscar = "'"+fechaBuscar+"'";
            horaBuscar = "'"+horaBuscar+"'";
            String query = "SELECT * " +
                    "FROM medico " +
                    "WHERE med_numRegistroMedico NOT IN (" +
                    "SELECT med_numRegistroMedico " +
                    "FROM cita " +
                    "WHERE cita_fechaCita = "+fechaBuscar+" AND cita_horaCita = "+horaBuscar+") " +
                    "AND med_numRegistroMedico IN (" +
                    "SELECT med_numRegistroMedico " +
                    "FROM plazaMedico " +
                    "WHERE hosp_idHosp = 3001)";
            DefaultTableModel model = (DefaultTableModel)this.jTab_Records.getModel();
            Connection con = ConexionBD.getConexion(ConexionBD.con);
            Statement statement = con.createStatement();
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("Num");
            model.addColumn("Nombre");
            model.addColumn("2do Nombre");
            model.addColumn("Ap Paterno");
            model.addColumn("Ap Materno");
            model.addColumn("Teléfono");
            model.addColumn("Correo");
            model.addColumn("Especialidad");
            ResultSet resultSet;
            resultSet= statement.executeQuery(query);
                    while (resultSet.next()) {
                        Object[] rowData = new Object[8]; 
                        rowData[0] = resultSet.getInt("med_numRegistroMedico");
                        rowData[1] = resultSet.getString("med_primNomMed");
                        rowData[2] = resultSet.getString("med_segunNomMed");
                        rowData[3] = resultSet.getString("med_apPatMed");
                        rowData[4] = resultSet.getString("med_apMatMed");
                        rowData[5] = resultSet.getInt("med_telMed");
                        rowData[6] = resultSet.getString("med_correoMed");
                        rowData[7] = resultSet.getInt("esp_numEsp");
                        model.addRow(rowData);
                    }
        } catch (SQLException ex) {
            Logger.getLogger(VC_Citas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bt_buscarActionPerformed

    private void jbt_funcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_funcionActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel)this.jTab_Records.getModel();
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("med_numRegistroMedico");
            model.addColumn("med_primNomMed");
            model.addColumn("med_apPatMed");
            model.addColumn("esp_numEsp");
            model.addColumn("esp_tipoEspecialidad");
            Connection con = ConexionBD.getConexion(ConexionBD.con);
            Statement statement = con.createStatement();
            ResultSet resultSet;
            int esp = Integer.parseInt(JOptionPane.showInputDialog("Que especialidad de médico deseas buscar?"));
            String query = "SELECT med_numRegistroMedico, med_primNomMed, med_apPatMed, esp_numEsp, esp_tipoEspecialidad "
                    + "FROM buscarMedicosPorEspecialidad(1) "
                    + "ORDER BY med_primNomMed;";
            resultSet= statement.executeQuery(query);
            while (resultSet.next()) {
                        Object[] rowData = new Object[5]; 
                        rowData[0] = resultSet.getInt("med_numRegistroMedico");
                        rowData[1] = resultSet.getString("med_primNomMed");
                        rowData[2] = resultSet.getString("med_apPatMed");
                        rowData[3] = resultSet.getString("esp_numEsp");
                        rowData[4] = resultSet.getString("esp_tipoEspecialidad");
                        model.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VC_Citas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbt_funcionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VC_Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VC_Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VC_Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VC_Citas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VC_Citas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton bt_buscar;
    private javax.swing.JButton jBtn_AgendarCita;
    private javax.swing.JButton jBtn_Back;
    private javax.swing.JComboBox<String> jCB_Selection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTab_Records;
    private javax.swing.JButton jbt_funcion;
    // End of variables declaration//GEN-END:variables
}

